import numpy as np
import os
from .spatial import angle, angle_2v, distance


def surface_atoms(protein, msms_path):
    '''
    protein:the path of protein file
    msms_path: the path of msms script 
    '''
    pwd = os.getcwd()
    filepath, filename = os.path.split(protein)
    os.chdir(filepath)
    os.system(f'cp {msms_path}/atmtypenumbers  ./')
    xyzrn_file = filename.replace('.pdbqt', '.xyzrn')
    os.system(f'{msms_path}/pdb_to_xyzrn  {filename} > {xyzrn_file}')
    face_file = xyzrn_file.replace('.xyzrn', '')
    os.system(
        f'{msms_path}/msms.x86_64Linux2.2.6.1 -if {xyzrn_file} -of {face_file}')
    face_read = open(f'{face_file}.vert', 'r')
    surface_atoms = []
    for line in face_read.readlines():
        line = line.split('#')[0]
        line_sp = line.split()
        if len(line_sp) == 10:
            surface_atoms.append(int(line_sp[7])-1)
    os.chdir(pwd)
    print(os.getcwd())
    surface_atoms.sort()
    return list(set(surface_atoms))


def pocket_atoms(x, y, cutoff, x_column='coords', y_column='coords',
                 cutoff_low=0.):
    """Returns pairs of atoms which are within close contac distance cutoff.
    The cutoff is semi-inclusive, i.e (cutoff_low, cutoff].

    Parameters
    ----------
    x, y : atom_dict-type numpy array
        Atom dictionaries generated by oddt.toolkit.Molecule objects.

    cutoff : float
        Cutoff distance for close contacts

    x_column, ycolumn : string, (default='coords')
        Column containing coordinates of atoms (or pseudo-atoms,
        i.e. ring centroids)

    cutoff_low : float (default=0.)
        Lower bound of contacts to find (exclusive). Zero by default.
        .. versionadded:: 0.6

    Returns
    -------
    x_, y_ : atom_dict-type numpy array
        Aligned pairs of atoms in close contact for further processing.
    """
    if len(x[x_column]) > 0 and len(x[x_column]) > 0:
        d = distance(x[x_column], y[y_column])
        index = np.argwhere((d > cutoff_low) & (d <= cutoff))
        return index[:, 0]
    else:
        return []


# # test of surface atom
# protein = '/mnt/home/zhangjie/Projects/cRNN/Atom-Based-Interaction-Fingerprint/Data/Protein/test/cdk2.pdbqt'
# msms_path = '/mnt/home/zhangjie/Projects/cRNN/Atom-Based-Interaction-Fingerprint/model/toolkits/msms'
# Surface_Atoms = surface_atoms(protein, msms_path)
# print(Surface_Atoms)
